(
 (?)
 ;
 (
 (
 (?)
 )
 |
 (
 (?)
 )
 )
 )
;
(?)
;
(?)
;
(?)
;
(?)
;
(gcd , prime , exp)
;
(gcd , prime , exp)
;
(gcd : NAT*NAT --> NAT & exp : NAT*NAT +-> NAT & !(aa , bb).(aa : NAT & bb : NAT1 => exp(aa , bb) = exp(aa , bb-1)*aa & exp(aa , 1) = aa & exp(bb , 0) = 1 & exp(0 , bb) = 0) & prime <: NAT)
;
(gcd : NAT*NAT --> NAT & exp : NAT*NAT +-> NAT & !(aa , bb).(aa : NAT & bb : NAT1 => exp(aa , bb) = exp(aa , bb-1)*aa & exp(aa , 1) = aa & exp(bb , 0) = 1 & exp(0 , bb) = 0) & prime <: NAT)
;
(?)
;
(?)
;
(?)
;
(?)
;
(?)
;
(?)
;
(?)
;
(?)
;
(?)
;
(exp_op)
;
(exp_op)
;
(ArithmeticI(?):(?):(Arithmetic))
;
(
(
 (exp_op)
;
 (? , Val_Op , NonDet_Op , (rr <-- exp_op(aa , bb)))
;
 (aa , bb)
;
 (rr)
;
 (
 (true)
 |
 (
 (VAR ii , kk IN
 ii := bb;
 kk := 1;
 WHILE ii /= 0 DO
 kk := kk*aa;
 ii := ii-1
 INVARIANT
 ii : NAT &
 kk = exp(aa , bb-ii)
 VARIANT
 ii
 END;
 rr := kk
 END)
 )
 )
;
 (
 (true)
 |
 (
 @(ii , kk).
 (
 (
 (
 (
 (ii := bb)
 )
 ;
 (
 (kk := 1)
 )
 )
 ;
 (
 WHILE
 (not(ii = 0))
 DO
 (
 (
 (kk := kk*aa)
 )
 ;
 (
 (ii := ii-1)
 )
 )
 INVARIANT
 (ii : NAT & kk = exp(aa , bb-ii))
 VARIANT
 (ii)
 END
 )
 )
 ;
 (
 (rr := kk)
 )
 )
 )
 )
)
)
