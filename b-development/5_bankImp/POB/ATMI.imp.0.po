THEORY PropertiesX IS
  ctx(ATMI$1) => maxAccounts = 6;
  ctx(ATMI$1) => ctx(basic_io);
  ctx(ATMI$1) => ctx(file_dump);
  ctx(ATMI$1) => ctx(String_TYPE);
  ctx(String_TYPE) => STRING = {ss | ss : seq(CHAR) & size(ss) <= 1000};
  ctx(String_TYPE) => card(CHAR) : NAT1;
  ctx(String_TYPE) => card(STRING) : NAT1;
  ctx(ATMI$1) => ctx(Scalar_TYPE);
  ctx(Scalar_TYPE) => SCALAR = 0..2147483646;
  ctx(Scalar_TYPE) => card(SCALAR) = 2147483647;
  ctx(Scalar_TYPE) => card(SCALAR) : NAT1;
  ctx(ATMI$1) => ctx(Bool_TYPE);
  ctx(Bool_TYPE) => BOOL = {FALSE , TRUE};
  ctx(Bool_TYPE) => card(BOOL) = 2;
  ctx(ATMI$1) => ctx(ATM_SocketClient);
  ctx(ATMI$1) => ctx(con_Nvar);
  ctx(ATMI$1) => ctx(Cipher);
  ctx(Cipher) => encrypt : NAT --> NAT;
  ctx(Cipher) => decrypt : NAT --> NAT;
  ctx(Cipher) => !mm.(mm : 0..6 => encrypt(decrypt(mm)) = mm);
  ctx(Cipher) => !mm.(mm : 0..6 => decrypt(encrypt(mm)) = mm)
END
&
THEORY EnumerateX IS
  binhyp(ctx(Bool_TYPE)) => BOOL == {FALSE , TRUE}
END
&
THEORY NotEqualX IS
  binhyp(BOOL = {FALSE , TRUE}) & binhyp(card(BOOL) = 2) => not(FALSE = TRUE);
  binhyp(BOOL = {FALSE , TRUE}) & binhyp(card(BOOL) = 2) => not(TRUE = FALSE)
END
&
THEORY RewriteToFalseOrTrueX IS
  binhyp(BOOL = {FALSE , TRUE}) & binhyp(card(BOOL) = 2) => FALSE = TRUE == false;
  binhyp(BOOL = {FALSE , TRUE}) & binhyp(card(BOOL) = 2) => TRUE = FALSE == false
END
&
THEORY FwdContra0X IS
  TRUE = FALSE & ctx(Bool_TYPE) => bfalse;
  x = TRUE & x = FALSE & ctx(Bool_TYPE) => bfalse;
  x = TRUE & y = x & y = FALSE & ctx(Bool_TYPE) => bfalse;
  x = FALSE & x = TRUE & ctx(Bool_TYPE) => bfalse;
  x = FALSE & y = x & y = TRUE & ctx(Bool_TYPE) => bfalse
END
&
THEORY FwdEqual1X IS
  FALSE = x => x = FALSE;
  TRUE = x => x = TRUE;
  not(FALSE = x) & ctx(Bool_TYPE) => x = TRUE;
  not(x = FALSE) & ctx(Bool_TYPE) => x = TRUE;
  not(TRUE = x) & ctx(Bool_TYPE) => x = FALSE;
  not(x = TRUE) & ctx(Bool_TYPE) => x = FALSE
END
&
THEORY ExpandHypX IS
  inv(ATMI$1) => inv(basic_io);
  inv(ATMI$1) => inv(file_dump);
  inv(ATMI$1) => inv(String_TYPE);
  inv(ATMI$1) => inv(Scalar_TYPE);
  inv(ATMI$1) => inv(Bool_TYPE);
  inv(ATM) => con : BOOL;
  inv(ATM) => pubDecrypt : 1..6;
  pre(create_account) => con = TRUE;
  pre(deposit) => acc : 0..maxAccounts;
  pre(deposit) => amount : NAT1;
  pre(deposit) => con = TRUE;
  pre(withdraw) => acc : 0..maxAccounts;
  pre(withdraw) => amount : NAT1;
  pre(withdraw) => con = TRUE;
  pre(isaccount) => acc : 0..maxAccounts;
  pre(isaccount) => con = TRUE;
  pre(getbalance) => acc : 0..maxAccounts;
  pre(getbalance) => con = TRUE;
  inv(ATMI$1) => inv(ATM);
  asn(ATMI$1) => asn(ATM);
  inv(ATMI$1) => outbufsize$1 : NAT1;
  inv(ATMI$1) => 10 <= outbufsize$1;
  inv(ATMI$1) => in$1 : NAT1;
  inv(ATMI$1) => 10 <= in$1;
  inv(ATMI$1) => inptr$1 : 0..in$1;
  inv(ATMI$1) => outptr$1 : 0..outbufsize$1;
  inv(ATMI$1) => con_Nvar$1 : 0..1
END
&
THEORY Initialisation IS
  cst(ATMI$1) & ctx(ATMI$1) => 0 : 0..1
END
&
THEORY connecting IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(connecting) => "ATM connecion to server...\n" : STRING;
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(connecting) => "127.0.0.1" : STRING;
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(connecting) => 3200 : NAT;
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(connecting) => (repx : BOOL & repx$0 : BOOL & not(repx$0 = TRUE) => "can not connect..." : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(connecting) => (repx : BOOL & repx$0 : BOOL & repx$0 = TRUE => 1 : 0..1)
END
&
THEORY shut_down IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(shut_down) => 0 : 0..1
END
&
THEORY create_account IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 => 1 : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => "requesting 'create_account'\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => "requesting 'create_account'\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => "requesting 'create_account'\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) => "No connection to server\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "encrypted account number is:\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..6);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "Your new account has Account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => " " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(create_account) => (not(con_Nvar$1 = 1) & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => decrypt(tokx) : 0..maxAccounts)
END
&
THEORY deposit IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 => 2 : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & 2 <= bufsize & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL & bufsize < 2 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & inptr$1+1+1 <= in$1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL & in$1 < inptr$1+1+1 & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "New balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx$0 : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL & tokx$0 : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & not(con_Nvar$1 = 1) => newBalanceZ : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (acc < maxAccounts & amount < 5000 & not(con_Nvar$1 = 1) => okZ : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (not(acc < maxAccounts & amount < 5000) => newBalanceZ : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(deposit) => (not(acc < maxAccounts & amount < 5000) => okZ : BOOL)
END
&
THEORY withdraw IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 => 3 : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outptr$1+1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & outbufsizex : NAT1 & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outptr$1+1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & outbufsizex < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outptr$1+1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & outbufsizex$1 : NAT1 & outptr$1+1+1+1 <= outbufsizex$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & outbufsizex$0 < outptr$1+1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => amount : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of withdrawal: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (acc < maxAccounts & amount < 5000 & not(con_Nvar$1 = 1) => okZ : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(withdraw) => (not(acc < maxAccounts & amount < 5000) => okZ : BOOL)
END
&
THEORY isaccount IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 => 4 : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "Status of account Number: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (acc < maxAccounts & not(con_Nvar$1 = 1) => rrZ : BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(isaccount) => (maxAccounts <= acc => rrZ : BOOL)
END
&
THEORY getbalance IS
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 => 5 : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outptr$1+1+1 <= outbufsize$1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & outbufsizex : NAT1 & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outptr$1+1 <= outbufsize$1 & outbufsize$1 < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outptr$1+1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & outbufsizex$0 : NAT1 & outptr$1+1+1 <= outbufsizex$0 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & outbufsizex < outptr$1+1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => acc : SCALAR \/ BOOL);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & outbufsizex : NAT1 & outptr$1+1 <= outbufsizex & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & 1 <= bufsize & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 => 1 : 1..4);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & inptr$1+1 <= in$1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "balance is: " : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : NAT);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => "\n" : STRING);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & con_Nvar$1 = 1 & outbufsize$1 < outptr$1+1 & bufsize : NAT1 & 10 <= bufsize & in$1 < inptr$1+1 & tokx : SCALAR \/ BOOL => tokx : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (acc < maxAccounts & not(con_Nvar$1 = 1) => balZ : 0..5000);
  cst(ATMI$1) & ctx(ATMI$1) & inv(ATMI$1) & asn(ATMI$1) & pre(getbalance) => (maxAccounts <= acc => balZ : 0..5000)
END
&
THEORY Context
END
&
THEORY Assertions
END
&
THEORY Constraints IS
  cst(ATMI$1) & ctx(ATMI$1) => card(SCALAR \/ BOOL) : NAT1;
  cst(ATMI$1) & ctx(ATMI$1) => 10 : NAT;
  cst(ATMI$1) & ctx(ATMI$1) => 1 <= 2147483646;
  cst(ATMI$1) & ctx(ATMI$1) => 1 : NAT;
  cst(ATMI$1) & ctx(ATMI$1) => 99 mod 7-1 = 1;
  cst(ATMI$1) & ctx(ATMI$1) => 11 : NAT;
  cst(ATMI$1) & ctx(ATMI$1) => 9 : NAT;
  cst(ATMI$1) & ctx(ATMI$1) => 7 : NAT1
END
